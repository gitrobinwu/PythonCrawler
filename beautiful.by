#-*- coding:utf-8 -*- 
import bs4 
from bs4 import BeautifulSoup 

html = '''
<html><head><title>The Dormouse's story</title></head>
<body>
<p class="title" name="dromouse"><b>The Dormouse's story</b></p>
<p class="story">Once upon a time there were three little sisters; and their names were
<a href="http://example.com/elsie" class="sister" id="link1"><!-- Elsie --></a>,
<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
and they lived at the bottom of a well.</p>
<p class="story">...</p>
'''
# 创建beautifulsoup对象
soup = BeautifulSoup(html,"html.parser")

# 从html文件创建soup对象
# soup = BeautifulSoup(open('index.html'))

# 打印格式化文档
print soup.prettify() 
	
#################################### 
print '-'*30+'Tag 对象'+'-'*30 
# 返回的是第一个tag对象
print soup.title 
print soup.head 
print soup.a 
print soup.p 
print type(soup.p)
print '-'*60 

# 属性: name 和 attrs
print soup.name 
print soup.p.name 

# 返回一个属性的字典
print soup.p.attrs 
#获取某个属性的值
print soup.p['class']
print soup.p.get('class')

# 修改某个属性
soup.p['class'] = 'newClass'
print soup.p.attrs  
# 删除某个属性
del soup.p['class']
print soup.p.attrs  

################################### 
print '-'*30+'NavigableString 对象'+'-'*30 
# 获取标签内部的文本内容
print soup.p.string 
print type(soup.p.string)

################################### 
print '-'*30+'BeautifulSoup 对象'+'-'*30 
print type(soup.name)
print soup.name 
print soup.attrs 

######################################### 
print '-'*30+'Comment 对象'+'-'*30 
# 判断是否是注释对象
print soup.a 
if type(soup.a.string) == bs4.element.Comment:
	print soup.a.string 


#########################################################
print u'遍历文档树'
#1, 直接子节点
#.contents  返回的是子节点的列表
print soup.body.contents
'''print soup.head.contents[0]

# .children 返回的是子节点生成器
print '-'*60 
for child in soup.body.children:
	print child

print '*'*60 	
#2, 所有子孙节点
# .descendants 
# 递归遍历子节点html --> body --> 
print type(soup.descendants)
for child in soup.descendants:
	print child 

#3, 节点内容 
# .string 

print soup.b 
# 如果tag只有一个子节点，则tag.string == tag.subtag.string 
print soup.p.string 
print soup.b.string 
# 如果tag有多个子节点，则返回None 
print soup.html.string 
'''
#4, 所有节点内容
# .strings 
print '-'*60 
'''for string in soup.strings:
	print repr(string)

# stripped_strings 去除空行或多个空格
for string in soup.stripped_strings:
	print repr(string)
'''

#5, 父节点
# .parent 
'''p = soup.p 
print p.parent.name 

content = soup.head.title.string 
print content.parent.name 

#6, 所有父节点
# .parents 
# 通过元素的 .parents 属性可以递归得到元素的所有父辈节点 
print '-'*60 
for parent in content.parents:
	print parent.name 
'''
#7, 兄弟节点
# 兄弟节点可以理解为和本节点处在统一级的节点，.next_sibling 属性获取了该节点的下一个兄弟节点，.previous_sibling 则与之相反，如果节点不存在，则返回 None
# .next_sibling .prev_sibling 
'''print soup.p.next_sibling
print soup.p.prev_sibling
print soup.p.next_sibling.next_sibling 

#8, 全部兄弟节点
# 通过 .next_siblings 和 .previous_siblings 属性可以对当前节点的兄弟节点迭代输出
print '-'*60 
for string in soup.p.next_siblings:
	print repr(string)

print '-'*60 
for string in soup.p.previous_siblings:
	print repr(string)
'''

#9, 前后节点
# 与 .next_sibling .previous_sibling 不同，它并不是针对于兄弟节点，而是在所有节点，不分层次
# 后一个节点
'''print soup.head.next_element 
# 前一个节点
print soup.title.previous_element 

#10，所有前后节点
# 通过 .next_elements 和 .previous_elements 的迭代器就可以向前或向后访问文档的解析内容,就好像文档正在被解析一样
print '-'*60 
for element in soup.head.next_elements:
	print repr(element)

for element in soup.head.previous_elements:
	print repr(element)
'''	

#########################################################
print u'搜索文档树'


